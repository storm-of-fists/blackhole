(## All comments have a start and end marker
This adds just a bit more pain to them
also means one shape for all comments, can have multiline ##)

(## keywords are in ALL_CAPS
these can be things like ALL or FILE or LINE
avoid the use of __dunders or _unders
use explicit words for those. ##)

(## Function calls are also written this way, no distinction.
Could maybe use color to distinguish when things run. ##)
(module_define name fun_module

    (## Can define constants for a module
    can even define constants with odd shapes, these are loaded
    at module load time and added to global const memory ##)
    (const_define fun_const
        some_field Float32 34.1
    )

    (## Arguments are just white spaced between each other ##)
    description "These are args"
    module_func_kwarg "here is how i set some kwarg"

    (# Define data structures, name in CamelCase #)
    (# Defines typically have the name on the same line. #)
    (data_define StructOne
        (# fields are field name and then the type #)
        field_one Float32
        field_two Float64

        (# getters are automatically defined for you but you can always #)
        (# add your own functions. #)
        (function_define get_field_one
            (
                (return field_one)
            )
        )

        (function_define constructor_one
            field_one Float32
            (
                (StructOne
                    field_one field_one
                    field_two 3134422.3232
                )
            )
        )
    )

    (data_define StructTwo
        (# the "strategy" function defined here will be applied to
        the inbound data values. #)
        (# TODO or maybe not, maybe we require people to be explicit #)
        field_one move Integer32
        field_two copy UnsignedInteger32
        field_three reference Float64
    )

    (# Nested data structures #)
    (data_define MyData
        # use a field name to make this struct a field on the struct
        field_one StructOne
        (# If you use the SPREAD keyword, it will smear the
        other data type into this one, not counting toward nesting count
        and giving you all the fields and methods. #)
        SPREAD StructTwo
    )

    (function_define function_one
        (# field definitions typically go on newlines, same as structs #)
        arg_one StructOne
        arg_two StructTwo
        (
            (# explicit return function #)
            (return (add (arg_one field_three) (arg_two field_three)))
        )
    )

    (function_define function_two
        arg_one StructOne
        arg_two StructTwo
        (
            (# use specific words for binding variables #)
            (# stack will put it on the stack if possible #)
            (# compiler warns you if not possible #)
            (# cast to a type some value #)
            (# access fields on structs via the anonymous func #)
            (bind local_variable(Float64) (cast Integer64 (arg_one field_one)))

            (mutate local_variable 41.123)

            (# alloc will put this object onto the heap. this is
            completely optional for this struct, but could be
            required for some things.
            field_one doesnt need to be set to some default. #)
            (bind allocated_variable Pointer StructOne
                (allocate (StructOne
                    constructor_one
                    field_one 42.2133
                ))
            )
            (bind stacked_struct StructOne (StructOne constructor_one 312.1))

            (local_variable)
        )
    )

    (function_define function_two
        (# no default set, must supply #)
        arg_one UnsignedInteger32
        (# have a default option being set after the field and type #)
        arg_two UnsignedInteger32 1
        (

        )
    )
)
