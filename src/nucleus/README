# README

Nucleus is a small, opinionated, Rust framework meant to standardize program state and its modification.

## Parts

Nucleus has 3 major parts: Nucleus, State, and Doer. A Nucleus contains stores for state and doers. State contains program data. Doers manipulate state or other doers.

### Nucleus

The nucleus is where you start your program. Usually the only two things you do to the nucleus directly are adding doers and running the nucleus. The nucleus "runs" by looping over each doer continuously.

### State

State is added/acquired/removed from a StateStore. You can register "thread-local state" or "shared state" that can be accessed across thread boundaries. State is a thin wrapper around Rc<RefCell\<T>\>, providing only specific APIs to prevent blocking. Shared state is a thin wrapper around Arc<Mutex\<T>\>.

State and shared state are stored in their own HashMaps, with the key being their TypeId's. If multithreading is added to your program, each new nucleus that is spawned will get a copy of the shared state created by the first nucleus.

### Doer

Doers are trait objects stored in a vector. Each contains only a State or SharedState of what they need for their update method.

## Design Philosophy

I am a lazy person. I wanted something as flexible as possible and as simple as possible.

I was trying to avoid:

- Async.
- Complicated doer scheduling/lifecycle.
- Context pointers.
- Deeply nested or deeply composed state.
- Hidden state.
- Message passing.
- Abstraction of the work cycle.
- Building too much into the framework. I wanted other people to come up with commonly used modules.

## Benchmarks and Tests

I also wanted the framework to be easily testable. Doers can be enabled/disabled as needed. A user that wants to test a certain plugin can load it, then replace any doers with their own test doers.

## Resources

- <https://matklad.github.io/2021/09/05/Rust100k.html>
